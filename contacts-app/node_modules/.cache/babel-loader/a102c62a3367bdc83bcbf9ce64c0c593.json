{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\n\n// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n  // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n  return undefined;\n}\n\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport const useGridScroll = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const scrollToHeader = params.rowIndex == null;\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      let cellWidth;\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      }\n      // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n      const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  const scroll = React.useCallback(params => {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      const direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};","map":{"version":3,"names":["React","useTheme","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","useGridSelector","gridPageSelector","gridPageSizeSelector","gridRowCountSelector","gridRowsMetaSelector","useGridApiMethod","gridExpandedSortedRowEntriesSelector","gridClasses","scrollIntoView","dimensions","clientHeight","scrollTop","offsetHeight","offsetTop","elementBottom","undefined","useGridScroll","apiRef","props","theme","logger","colRef","current","columnHeadersElementRef","virtualScrollerRef","visibleSortedRows","scrollToIndexes","useCallback","params","totalRowCount","visibleColumns","scrollToHeader","rowIndex","length","debug","colIndex","scrollCoordinates","columnPositions","cellWidth","_visibleSortedRows$pa","rowId","id","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","width","computedWidth","left","clientWidth","Math","abs","scrollLeft","_querySelector","_querySelector2","rowsMeta","state","page","pageSize","elementIndex","pagination","targetOffsetHeight","positions","currentPageTotalHeight","topPinnedRowsHeight","querySelector","bottomPinnedRowsHeight","top","unstable_applyPipeProcessors","scroll","direction","getScrollPosition","scrollApi"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\n\n// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n  // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n  return undefined;\n}\n\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport const useGridScroll = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const scrollToHeader = params.rowIndex == null;\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      let cellWidth;\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      }\n      // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n      const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  const scroll = React.useCallback(params => {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      const direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}