{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key,\n      colDef\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        const initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n        startCellEditModeParams.initialValue = initialValue;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let unstable_updateValueOnRender = false;\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","colDef","startCellEditModeParams","version","startsWith","deleteValue","initialValue","valueParser","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","onCellEditStart","onCellEditStop","editingState","state","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","newValue","getCellValue","unstable_updateValueOnRender","value","error","isProcessingProps","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","_editingState$id","_editingState$id$fiel","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","changeReason","preProcessEditCellProps","hasChanged","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key,\n      colDef\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        const initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n        startCellEditModeParams.initialValue = initialValue;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let unstable_updateValueOnRender = false;\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"AAAA,OAAOA,6BAA6B,MAAM,yDAAyD;AACnG,OAAOC,cAAc,MAAM,0CAA0C;AACrE,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,MAAMC,SAAS,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC;EAC/BC,UAAU,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,yBAAyB,IAAIC,gBAAgB,QAAQ,YAAY;AAC1E,SAASC,sBAAsB,EAAEC,uBAAuB,QAAQ,oCAAoC;AACpG,SAASC,aAAa,EAAEC,aAAa,QAAQ,kCAAkC;AAC/E,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,yBAAyB,QAAQ,wBAAwB;AAClE,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,mCAAmC,QAAQ,0BAA0B;AAC9E,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,wBAAwB,EAAEC,uBAAuB,QAAQ,2CAA2C;AAC7G,MAAMC,qCAAqC,GAAGL,YAAY,CAAC,CAAC,sHAAsH,EAAE,0IAA0I,EAAE,4FAA4F,CAAC,EAAE,OAAO,CAAC;AACva,OAAO,MAAMM,kBAAkB,GAAG,CAACC,MAAM,EAAEC,KAAK,KAAK;EACnD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,KAAK,CAACqB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAMC,iBAAiB,GAAGtB,KAAK,CAACuB,MAAM,CAACJ,cAAc,CAAC;EACtD,MAAMK,kBAAkB,GAAGxB,KAAK,CAACuB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAM;IACJE,gBAAgB;IAChBC,uBAAuB;IACvBP,cAAc,EAAEQ,kBAAkB;IAClCC;EACF,CAAC,GAAGV,KAAK;EACT,MAAMW,mBAAmB,GAAGC,QAAQ,IAAI,YAAa;IACnD,IAAIZ,KAAK,CAACa,QAAQ,KAAK1B,aAAa,CAAC2B,IAAI,EAAE;MACzCF,QAAQ,CAAC,YAAO,CAAC;IACnB;EACF,CAAC;EACD,MAAMG,kBAAkB,GAAGjC,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,KAAK;IAC1D,MAAMC,MAAM,GAAGpB,MAAM,CAACqB,OAAO,CAACC,aAAa,CAACJ,EAAE,EAAEC,KAAK,CAAC;IACtD,IAAI,CAACnB,MAAM,CAACqB,OAAO,CAACE,cAAc,CAACH,MAAM,CAAC,EAAE;MAC1C,MAAM,IAAII,KAAK,CAAE,yBAAwBN,EAAG,cAAaC,KAAM,mBAAkB,CAAC;IACpF;EACF,CAAC,EAAE,CAACnB,MAAM,CAAC,CAAC;EACZ,MAAMyB,gBAAgB,GAAG1C,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,EAAEO,IAAI,KAAK;IAC9D,IAAI1B,MAAM,CAACqB,OAAO,CAACM,WAAW,CAACT,EAAE,EAAEC,KAAK,CAAC,KAAKO,IAAI,EAAE;MAClD,MAAM,IAAIF,KAAK,CAAE,yBAAwBN,EAAG,cAAaC,KAAM,cAAaO,IAAK,QAAO,CAAC;IAC3F;EACF,CAAC,EAAE,CAAC1B,MAAM,CAAC,CAAC;EACZ,MAAM4B,qBAAqB,GAAG7C,KAAK,CAACkC,WAAW,CAAC,CAACG,MAAM,EAAES,KAAK,KAAK;IACjE,IAAI,CAACT,MAAM,CAACU,UAAU,EAAE;MACtB;IACF;IACA,IAAIV,MAAM,CAACW,QAAQ,KAAK1C,aAAa,CAAC2C,IAAI,EAAE;MAC1C;IACF;IACA,MAAMC,SAAS,GAAGrD,QAAQ,CAAC,CAAC,CAAC,EAAEwC,MAAM,EAAE;MACrCc,MAAM,EAAEtC,wBAAwB,CAACuC;IACnC,CAAC,CAAC;IACFnC,MAAM,CAACqB,OAAO,CAACe,YAAY,CAAC,eAAe,EAAEH,SAAS,EAAEJ,KAAK,CAAC;EAChE,CAAC,EAAE,CAAC7B,MAAM,CAAC,CAAC;EACZ,MAAMqC,kBAAkB,GAAGtD,KAAK,CAACkC,WAAW,CAAC,CAACG,MAAM,EAAES,KAAK,KAAK;IAC9D,IAAIT,MAAM,CAACW,QAAQ,KAAK1C,aAAa,CAACiD,IAAI,EAAE;MAC1C;IACF;IACA,IAAItC,MAAM,CAACqB,OAAO,CAACM,WAAW,CAACP,MAAM,CAACF,EAAE,EAAEE,MAAM,CAACD,KAAK,CAAC,KAAK9B,aAAa,CAACiD,IAAI,EAAE;MAC9E;IACF;IACA,MAAML,SAAS,GAAGrD,QAAQ,CAAC,CAAC,CAAC,EAAEwC,MAAM,EAAE;MACrCc,MAAM,EAAErC,uBAAuB,CAAC0C;IAClC,CAAC,CAAC;IACFvC,MAAM,CAACqB,OAAO,CAACe,YAAY,CAAC,cAAc,EAAEH,SAAS,EAAEJ,KAAK,CAAC;EAC/D,CAAC,EAAE,CAAC7B,MAAM,CAAC,CAAC;EACZ,MAAMwC,iBAAiB,GAAGzD,KAAK,CAACkC,WAAW,CAAC,CAACG,MAAM,EAAES,KAAK,KAAK;IAC7D,IAAIT,MAAM,CAACW,QAAQ,KAAK1C,aAAa,CAAC2C,IAAI,EAAE;MAC1C;MACA;MACA,IAAIH,KAAK,CAACY,KAAK,KAAK,GAAG,EAAE;QACvB;MACF;MACA,IAAIP,MAAM;MACV,IAAIL,KAAK,CAACa,GAAG,KAAK,QAAQ,EAAE;QAC1BR,MAAM,GAAGrC,uBAAuB,CAAC8C,aAAa;MAChD,CAAC,MAAM,IAAId,KAAK,CAACa,GAAG,KAAK,OAAO,EAAE;QAChCR,MAAM,GAAGrC,uBAAuB,CAAC+C,YAAY;MAC/C,CAAC,MAAM,IAAIf,KAAK,CAACa,GAAG,KAAK,KAAK,EAAE;QAC9BR,MAAM,GAAGL,KAAK,CAACgB,QAAQ,GAAGhD,uBAAuB,CAACiD,eAAe,GAAGjD,uBAAuB,CAACkD,UAAU;QACtGlB,KAAK,CAACmB,cAAc,EAAE,CAAC,CAAC;MAC1B;;MAEA,IAAId,MAAM,EAAE;QACV,MAAMD,SAAS,GAAGrD,QAAQ,CAAC,CAAC,CAAC,EAAEwC,MAAM,EAAE;UACrCc;QACF,CAAC,CAAC;QACFlC,MAAM,CAACqB,OAAO,CAACe,YAAY,CAAC,cAAc,EAAEH,SAAS,EAAEJ,KAAK,CAAC;MAC/D;IACF,CAAC,MAAM,IAAIT,MAAM,CAACU,UAAU,EAAE;MAC5B,IAAII,MAAM;MACV,MAAMe,eAAe,GAAGjD,MAAM,CAACqB,OAAO,CAAC6B,4BAA4B,CAAC,iBAAiB,EAAE,IAAI,EAAE;QAC3FrB,KAAK;QACLsB,UAAU,EAAE/B,MAAM;QAClBN,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACmC,eAAe,EAAE;QACpB;MACF;MACA,IAAIzD,cAAc,CAACqC,KAAK,CAAC,EAAE;QACzBK,MAAM,GAAGtC,wBAAwB,CAACwD,gBAAgB;MACpD,CAAC,MAAM,IAAI,CAACvB,KAAK,CAACwB,OAAO,IAAIxB,KAAK,CAACyB,OAAO,KAAKzB,KAAK,CAACa,GAAG,KAAK,GAAG,EAAE;QAChER,MAAM,GAAGtC,wBAAwB,CAACwD,gBAAgB;MACpD,CAAC,MAAM,IAAIvB,KAAK,CAACa,GAAG,KAAK,OAAO,EAAE;QAChCR,MAAM,GAAGtC,wBAAwB,CAACgD,YAAY;MAChD,CAAC,MAAM,IAAIf,KAAK,CAACa,GAAG,KAAK,QAAQ,IAAIb,KAAK,CAACa,GAAG,KAAK,WAAW,EAAE;QAC9D;QACAR,MAAM,GAAGtC,wBAAwB,CAAC2D,aAAa;MACjD;MACA,IAAIrB,MAAM,EAAE;QACV,MAAMD,SAAS,GAAGrD,QAAQ,CAAC,CAAC,CAAC,EAAEwC,MAAM,EAAE;UACrCc,MAAM;UACNQ,GAAG,EAAEb,KAAK,CAACa;QACb,CAAC,CAAC;QACF1C,MAAM,CAACqB,OAAO,CAACe,YAAY,CAAC,eAAe,EAAEH,SAAS,EAAEJ,KAAK,CAAC;MAChE;IACF;EACF,CAAC,EAAE,CAAC7B,MAAM,CAAC,CAAC;EACZ,MAAMwD,mBAAmB,GAAGzE,KAAK,CAACkC,WAAW,CAACG,MAAM,IAAI;IACtD,MAAM;MACJF,EAAE;MACFC,KAAK;MACLe,MAAM;MACNQ,GAAG;MACHe;IACF,CAAC,GAAGrC,MAAM;IACV,MAAMsC,uBAAuB,GAAG;MAC9BxC,EAAE;MACFC;IACF,CAAC;IACD,IAAIe,MAAM,KAAKtC,wBAAwB,CAACwD,gBAAgB,EAAE;MACxD,IAAIrE,KAAK,CAAC4E,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;QAClC;QACA;QACAF,uBAAuB,CAACG,WAAW,GAAG,IAAI;MAC5C,CAAC,MAAM;QACL,MAAMC,YAAY,GAAGL,MAAM,CAACM,WAAW,GAAGN,MAAM,CAACM,WAAW,CAACrB,GAAG,CAAC,GAAGA,GAAG;QACvEgB,uBAAuB,CAACI,YAAY,GAAGA,YAAY;MACrD;IACF,CAAC,MAAM,IAAI5B,MAAM,KAAKtC,wBAAwB,CAAC2D,aAAa,EAAE;MAC5DG,uBAAuB,CAACG,WAAW,GAAG,IAAI;IAC5C;IACA7D,MAAM,CAACqB,OAAO,CAAC2C,iBAAiB,CAACN,uBAAuB,CAAC;EAC3D,CAAC,EAAE,CAAC1D,MAAM,CAAC,CAAC;EACZ,MAAMiE,kBAAkB,GAAGlF,KAAK,CAACkC,WAAW,CAACG,MAAM,IAAI;IACrD,MAAM;MACJF,EAAE;MACFC,KAAK;MACLe;IACF,CAAC,GAAGd,MAAM;IACVpB,MAAM,CAACqB,OAAO,CAAC6C,+BAA+B,CAAChD,EAAE,EAAEC,KAAK,CAAC;IACzD,IAAIgD,gBAAgB;IACpB,IAAIjC,MAAM,KAAKrC,uBAAuB,CAAC+C,YAAY,EAAE;MACnDuB,gBAAgB,GAAG,OAAO;IAC5B,CAAC,MAAM,IAAIjC,MAAM,KAAKrC,uBAAuB,CAACkD,UAAU,EAAE;MACxDoB,gBAAgB,GAAG,OAAO;IAC5B,CAAC,MAAM,IAAIjC,MAAM,KAAKrC,uBAAuB,CAACiD,eAAe,EAAE;MAC7DqB,gBAAgB,GAAG,MAAM;IAC3B;IACA,MAAMC,mBAAmB,GAAGlC,MAAM,KAAK,eAAe;IACtDlC,MAAM,CAACqB,OAAO,CAACgD,gBAAgB,CAAC;MAC9BnD,EAAE;MACFC,KAAK;MACLiD,mBAAmB;MACnBD;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnE,MAAM,CAAC,CAAC;EACZd,sBAAsB,CAACc,MAAM,EAAE,iBAAiB,EAAEY,mBAAmB,CAACgB,qBAAqB,CAAC,CAAC;EAC7F1C,sBAAsB,CAACc,MAAM,EAAE,cAAc,EAAEY,mBAAmB,CAACyB,kBAAkB,CAAC,CAAC;EACvFnD,sBAAsB,CAACc,MAAM,EAAE,aAAa,EAAEY,mBAAmB,CAAC4B,iBAAiB,CAAC,CAAC;EACrFtD,sBAAsB,CAACc,MAAM,EAAE,eAAe,EAAEY,mBAAmB,CAAC4C,mBAAmB,CAAC,CAAC;EACzFtE,sBAAsB,CAACc,MAAM,EAAE,cAAc,EAAEY,mBAAmB,CAACqD,kBAAkB,CAAC,CAAC;EACvF9E,uBAAuB,CAACa,MAAM,EAAE,eAAe,EAAEC,KAAK,CAACqE,eAAe,CAAC;EACvEnF,uBAAuB,CAACa,MAAM,EAAE,cAAc,EAAEC,KAAK,CAACsE,cAAc,CAAC;EACrE,MAAM5C,WAAW,GAAG5C,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,KAAK;IACnD,MAAMqD,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IACpE,MAAMC,SAAS,GAAGF,YAAY,CAACtD,EAAE,CAAC,IAAIsD,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC;IAC7D,OAAOuD,SAAS,GAAGrF,aAAa,CAAC2C,IAAI,GAAG3C,aAAa,CAACiD,IAAI;EAC5D,CAAC,EAAE,CAACtC,MAAM,CAAC,CAAC;EACZ,MAAM2E,oBAAoB,GAAG1F,gBAAgB,CAAC2F,QAAQ,IAAI;IACxD,MAAMC,2BAA2B,GAAGD,QAAQ,KAAK3E,KAAK,CAACC,cAAc;IACrE,IAAIS,sBAAsB,IAAIkE,2BAA2B,EAAE;MACzDlE,sBAAsB,CAACiE,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtC;IACA,IAAI3E,KAAK,CAACC,cAAc,IAAI2E,2BAA2B,EAAE;MACvD,OAAO,CAAC;IACV;;IAEA1E,iBAAiB,CAACyE,QAAQ,CAAC;IAC3BvE,iBAAiB,CAACgB,OAAO,GAAGuD,QAAQ;IACpC5E,MAAM,CAACqB,OAAO,CAACe,YAAY,CAAC,sBAAsB,EAAEwC,QAAQ,CAAC;EAC/D,CAAC,CAAC;EACF,MAAME,2BAA2B,GAAG/F,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,EAAE4D,QAAQ,KAAK;IAC7E;IACA;IACA,MAAMH,QAAQ,GAAGhG,QAAQ,CAAC,CAAC,CAAC,EAAEyB,iBAAiB,CAACgB,OAAO,CAAC;IACxD,IAAI0D,QAAQ,KAAK,IAAI,EAAE;MACrBH,QAAQ,CAAC1D,EAAE,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC,EAAEgG,QAAQ,CAAC1D,EAAE,CAAC,EAAE;QACxC,CAACC,KAAK,GAAGvC,QAAQ,CAAC,CAAC,CAAC,EAAEmG,QAAQ;MAChC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAMC,YAAY,GAAGJ,QAAQ,CAAC1D,EAAE,CAAC;QAC/B+D,WAAW,GAAGvG,6BAA6B,CAACsG,YAAY,EAAE,CAAC7D,KAAK,CAAC,CAAC+D,GAAG,CAACvG,cAAc,CAAC,CAAC,CAAC,CAAC;MAC1FiG,QAAQ,CAAC1D,EAAE,CAAC,GAAG+D,WAAW;MAC1B,IAAIE,MAAM,CAACC,IAAI,CAACR,QAAQ,CAAC1D,EAAE,CAAC,CAAC,CAACmE,MAAM,KAAK,CAAC,EAAE;QAC1C,OAAOT,QAAQ,CAAC1D,EAAE,CAAC;MACrB;IACF;IACAyD,oBAAoB,CAACC,QAAQ,CAAC;EAChC,CAAC,EAAE,CAACD,oBAAoB,CAAC,CAAC;EAC1B,MAAMW,wBAAwB,GAAGvG,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,EAAE4D,QAAQ,KAAK;IAC1E/E,MAAM,CAACqB,OAAO,CAACkE,QAAQ,CAACd,KAAK,IAAI;MAC/B,MAAMe,eAAe,GAAG5G,QAAQ,CAAC,CAAC,CAAC,EAAE6F,KAAK,CAACgB,QAAQ,CAAC;MACpD,IAAIV,QAAQ,KAAK,IAAI,EAAE;QACrBS,eAAe,CAACtE,EAAE,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC,EAAE4G,eAAe,CAACtE,EAAE,CAAC,EAAE;UACtD,CAACC,KAAK,GAAGvC,QAAQ,CAAC,CAAC,CAAC,EAAEmG,QAAQ;QAChC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,OAAOS,eAAe,CAACtE,EAAE,CAAC,CAACC,KAAK,CAAC;QACjC,IAAIgE,MAAM,CAACC,IAAI,CAACI,eAAe,CAACtE,EAAE,CAAC,CAAC,CAACmE,MAAM,KAAK,CAAC,EAAE;UACjD,OAAOG,eAAe,CAACtE,EAAE,CAAC;QAC5B;MACF;MACA,OAAOtC,QAAQ,CAAC,CAAC,CAAC,EAAE6F,KAAK,EAAE;QACzBgB,QAAQ,EAAED;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;IACFxF,MAAM,CAACqB,OAAO,CAACqE,WAAW,EAAE;EAC9B,CAAC,EAAE,CAAC1F,MAAM,CAAC,CAAC;EACZ,MAAMgE,iBAAiB,GAAGjF,KAAK,CAACkC,WAAW,CAACG,MAAM,IAAI;IACpD,MAAM;QACFF,EAAE;QACFC;MACF,CAAC,GAAGC,MAAM;MACVuE,KAAK,GAAGjH,6BAA6B,CAAC0C,MAAM,EAAEvC,SAAS,CAAC;IAC1DmC,kBAAkB,CAACE,EAAE,EAAEC,KAAK,CAAC;IAC7BM,gBAAgB,CAACP,EAAE,EAAEC,KAAK,EAAE9B,aAAa,CAACiD,IAAI,CAAC;IAC/CwC,2BAA2B,CAAC5D,EAAE,EAAEC,KAAK,EAAEvC,QAAQ,CAAC;MAC9C8C,IAAI,EAAErC,aAAa,CAAC2C;IACtB,CAAC,EAAE2D,KAAK,CAAC,CAAC;EACZ,CAAC,EAAE,CAAC3E,kBAAkB,EAAES,gBAAgB,EAAEqD,2BAA2B,CAAC,CAAC;EACvE,MAAMc,8BAA8B,GAAG3G,gBAAgB,CAACmC,MAAM,IAAI;IAChE,MAAM;MACJF,EAAE;MACFC,KAAK;MACL0C,WAAW;MACXC;IACF,CAAC,GAAG1C,MAAM;IACV,IAAIyE,QAAQ,GAAG7F,MAAM,CAACqB,OAAO,CAACyE,YAAY,CAAC5E,EAAE,EAAEC,KAAK,CAAC;IACrD;IACA,IAAI4E,4BAA4B,GAAG,KAAK;IACxC,IAAIlC,WAAW,IAAIC,YAAY,EAAE;MAC/B+B,QAAQ,GAAGhC,WAAW,GAAG,EAAE,GAAGC,YAAY;MAC1CiC,4BAA4B,GAAG,IAAI;IACrC;IACA,MAAMhB,QAAQ,GAAG;MACfiB,KAAK,EAAEH,QAAQ;MACfI,KAAK,EAAE,KAAK;MACZC,iBAAiB,EAAE,KAAK;MACxBH;IACF,CAAC;IACDT,wBAAwB,CAACpE,EAAE,EAAEC,KAAK,EAAE4D,QAAQ,CAAC;IAC7C/E,MAAM,CAACqB,OAAO,CAAC8E,YAAY,CAACjF,EAAE,EAAEC,KAAK,CAAC;EACxC,CAAC,CAAC;EACF,MAAMkD,gBAAgB,GAAGtF,KAAK,CAACkC,WAAW,CAACG,MAAM,IAAI;IACnD,MAAM;QACFF,EAAE;QACFC;MACF,CAAC,GAAGC,MAAM;MACVuE,KAAK,GAAGjH,6BAA6B,CAAC0C,MAAM,EAAEtC,UAAU,CAAC;IAC3D2C,gBAAgB,CAACP,EAAE,EAAEC,KAAK,EAAE9B,aAAa,CAAC2C,IAAI,CAAC;IAC/C8C,2BAA2B,CAAC5D,EAAE,EAAEC,KAAK,EAAEvC,QAAQ,CAAC;MAC9C8C,IAAI,EAAErC,aAAa,CAACiD;IACtB,CAAC,EAAEqD,KAAK,CAAC,CAAC;EACZ,CAAC,EAAE,CAAClE,gBAAgB,EAAEqD,2BAA2B,CAAC,CAAC;EACnD,MAAMsB,6BAA6B,GAAGnH,gBAAgB,CAAC,MAAMmC,MAAM,IAAI;IACrE,MAAM;MACJF,EAAE;MACFC,KAAK;MACLiD,mBAAmB;MACnBD,gBAAgB,GAAG;IACrB,CAAC,GAAG/C,MAAM;IACVK,gBAAgB,CAACP,EAAE,EAAEC,KAAK,EAAE9B,aAAa,CAAC2C,IAAI,CAAC;IAC/ChC,MAAM,CAACqB,OAAO,CAAC6C,+BAA+B,CAAChD,EAAE,EAAEC,KAAK,CAAC;IACzD,MAAMkF,kBAAkB,GAAG,MAAM;MAC/Bf,wBAAwB,CAACpE,EAAE,EAAEC,KAAK,EAAE,IAAI,CAAC;MACzC2D,2BAA2B,CAAC5D,EAAE,EAAEC,KAAK,EAAE,IAAI,CAAC;MAC5C,IAAIgD,gBAAgB,KAAK,MAAM,EAAE;QAC/BnE,MAAM,CAACqB,OAAO,CAACiF,uBAAuB,CAACpF,EAAE,EAAEC,KAAK,EAAEgD,gBAAgB,CAAC;MACrE;IACF,CAAC;IACD,IAAIC,mBAAmB,EAAE;MACvBiC,kBAAkB,EAAE;MACpB;IACF;IACA,MAAM7B,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IACpE,MAAM;MACJwB,KAAK;MACLC;IACF,CAAC,GAAG1B,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC;IAC3B,IAAI8E,KAAK,IAAIC,iBAAiB,EAAE;MAC9B;MACA;MACA3F,kBAAkB,CAACc,OAAO,CAACH,EAAE,CAAC,CAACC,KAAK,CAAC,CAACO,IAAI,GAAGrC,aAAa,CAAC2C,IAAI;MAC/D;MACA8C,2BAA2B,CAAC5D,EAAE,EAAEC,KAAK,EAAE;QACrCO,IAAI,EAAErC,aAAa,CAAC2C;MACtB,CAAC,CAAC;MACF;IACF;IACA,MAAMuE,SAAS,GAAGvG,MAAM,CAACqB,OAAO,CAACmF,sCAAsC,CAACtF,EAAE,EAAEC,KAAK,CAAC;IAClF,IAAIX,gBAAgB,EAAE;MACpB,MAAMiG,WAAW,GAAGC,WAAW,IAAI;QACjCnG,kBAAkB,CAACc,OAAO,CAACH,EAAE,CAAC,CAACC,KAAK,CAAC,CAACO,IAAI,GAAGrC,aAAa,CAAC2C,IAAI;QAC/D;QACA8C,2BAA2B,CAAC5D,EAAE,EAAEC,KAAK,EAAE;UACrCO,IAAI,EAAErC,aAAa,CAAC2C;QACtB,CAAC,CAAC;QACF,IAAIvB,uBAAuB,EAAE;UAC3BA,uBAAuB,CAACiG,WAAW,CAAC;QACtC,CAAC,MAAM;UACL5G,qCAAqC,EAAE;QACzC;MACF,CAAC;MACD,IAAI;QACF,MAAM6G,GAAG,GAAG3G,MAAM,CAACqB,OAAO,CAACuF,MAAM,CAAC1F,EAAE,CAAC;QACrC2F,OAAO,CAACC,OAAO,CAACtG,gBAAgB,CAAC+F,SAAS,EAAEI,GAAG,CAAC,CAAC,CAACI,IAAI,CAACC,cAAc,IAAI;UACvEhH,MAAM,CAACqB,OAAO,CAAC4F,UAAU,CAAC,CAACD,cAAc,CAAC,CAAC;UAC3CX,kBAAkB,EAAE;QACtB,CAAC,CAAC,CAACa,KAAK,CAACT,WAAW,CAAC;MACvB,CAAC,CAAC,OAAOC,WAAW,EAAE;QACpBD,WAAW,CAACC,WAAW,CAAC;MAC1B;IACF,CAAC,MAAM;MACL1G,MAAM,CAACqB,OAAO,CAAC4F,UAAU,CAAC,CAACV,SAAS,CAAC,CAAC;MACtCF,kBAAkB,EAAE;IACtB;EACF,CAAC,CAAC;EACF,MAAMc,2BAA2B,GAAGpI,KAAK,CAACkC,WAAW,CAAC,MAAMG,MAAM,IAAI;IACpE,IAAIgG,gBAAgB,EAAEC,qBAAqB;IAC3C,MAAM;MACJnG,EAAE;MACFC,KAAK;MACL6E,KAAK;MACLsB,UAAU;MACVC,wBAAwB,EAAEC;IAC5B,CAAC,GAAGpG,MAAM;IACVJ,kBAAkB,CAACE,EAAE,EAAEC,KAAK,CAAC;IAC7BM,gBAAgB,CAACP,EAAE,EAAEC,KAAK,EAAE9B,aAAa,CAAC2C,IAAI,CAAC;IAC/C,MAAMyF,MAAM,GAAGzH,MAAM,CAACqB,OAAO,CAACqG,SAAS,CAACvG,KAAK,CAAC;IAC9C,MAAMwF,GAAG,GAAG3G,MAAM,CAACqB,OAAO,CAACuF,MAAM,CAAC1F,EAAE,CAAC;IACrC,IAAIyG,WAAW,GAAG3B,KAAK;IACvB,IAAIyB,MAAM,CAAC1D,WAAW,IAAI,CAACyD,eAAe,EAAE;MAC1CG,WAAW,GAAGF,MAAM,CAAC1D,WAAW,CAACiC,KAAK,EAAEhG,MAAM,CAACqB,OAAO,CAACC,aAAa,CAACJ,EAAE,EAAEC,KAAK,CAAC,CAAC;IAClF;IACA,IAAIqD,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IAClE,IAAIM,QAAQ,GAAGnG,QAAQ,CAAC,CAAC,CAAC,EAAE4F,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC,EAAE;MACnD6E,KAAK,EAAE2B,WAAW;MAClBC,YAAY,EAAEN,UAAU,GAAG,2BAA2B,GAAG;IAC3D,CAAC,CAAC;IACF,IAAIG,MAAM,CAACI,uBAAuB,EAAE;MAClC,MAAMC,UAAU,GAAG9B,KAAK,KAAKxB,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC6E,KAAK;MAC1DjB,QAAQ,GAAGnG,QAAQ,CAAC,CAAC,CAAC,EAAEmG,QAAQ,EAAE;QAChCmB,iBAAiB,EAAE;MACrB,CAAC,CAAC;MACFZ,wBAAwB,CAACpE,EAAE,EAAEC,KAAK,EAAE4D,QAAQ,CAAC;MAC7CA,QAAQ,GAAG,MAAM8B,OAAO,CAACC,OAAO,CAACW,MAAM,CAACI,uBAAuB,CAAC;QAC9D3G,EAAE;QACFyF,GAAG;QACH1G,KAAK,EAAE8E,QAAQ;QACf+C;MACF,CAAC,CAAC,CAAC;IACL;;IAEA;IACA;IACA,IAAI9H,MAAM,CAACqB,OAAO,CAACM,WAAW,CAACT,EAAE,EAAEC,KAAK,CAAC,KAAK9B,aAAa,CAACiD,IAAI,EAAE;MAChE,OAAO,KAAK;IACd;IACAkC,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IAC9DM,QAAQ,GAAGnG,QAAQ,CAAC,CAAC,CAAC,EAAEmG,QAAQ,EAAE;MAChCmB,iBAAiB,EAAE;IACrB,CAAC,CAAC;IACF;IACA;IACA;IACAnB,QAAQ,CAACiB,KAAK,GAAGyB,MAAM,CAACI,uBAAuB,GAAGrD,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC6E,KAAK,GAAG2B,WAAW;IAC7FrC,wBAAwB,CAACpE,EAAE,EAAEC,KAAK,EAAE4D,QAAQ,CAAC;IAC7CP,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IAC9D,OAAO,EAAE,CAAC2C,gBAAgB,GAAG5C,YAAY,CAACtD,EAAE,CAAC,KAAK,IAAI,IAAI,CAACmG,qBAAqB,GAAGD,gBAAgB,CAACjG,KAAK,CAAC,KAAK,IAAI,IAAIkG,qBAAqB,CAACpB,KAAK,CAAC;EACrJ,CAAC,EAAE,CAACjG,MAAM,EAAEgB,kBAAkB,EAAES,gBAAgB,EAAE6D,wBAAwB,CAAC,CAAC;EAC5E,MAAMkB,sCAAsC,GAAGzH,KAAK,CAACkC,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,KAAK;IAC9E,MAAMsG,MAAM,GAAGzH,MAAM,CAACqB,OAAO,CAACqG,SAAS,CAACvG,KAAK,CAAC;IAC9C,MAAMqD,YAAY,GAAGjF,yBAAyB,CAACS,MAAM,CAACqB,OAAO,CAACoD,KAAK,CAAC;IACpE,MAAMkC,GAAG,GAAG3G,MAAM,CAACqB,OAAO,CAACuF,MAAM,CAAC1F,EAAE,CAAC;IACrC,IAAI,CAACsD,YAAY,CAACtD,EAAE,CAAC,IAAI,CAACsD,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC,EAAE;MACjD,OAAOnB,MAAM,CAACqB,OAAO,CAACuF,MAAM,CAAC1F,EAAE,CAAC;IAClC;IACA,MAAM;MACJ8E;IACF,CAAC,GAAGxB,YAAY,CAACtD,EAAE,CAAC,CAACC,KAAK,CAAC;IAC3B,OAAOsG,MAAM,CAACM,WAAW,GAAGN,MAAM,CAACM,WAAW,CAAC;MAC7C/B,KAAK;MACLW;IACF,CAAC,CAAC,GAAG/H,QAAQ,CAAC,CAAC,CAAC,EAAE+H,GAAG,EAAE;MACrB,CAACxF,KAAK,GAAG6E;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,CAAChG,MAAM,CAAC,CAAC;EACZ,MAAMgI,UAAU,GAAG;IACjBrG,WAAW;IACXqC,iBAAiB;IACjBK;EACF,CAAC;EACD,MAAM4D,iBAAiB,GAAG;IACxBd,2BAA2B;IAC3BX;EACF,CAAC;EACDlH,gBAAgB,CAACU,MAAM,EAAEgI,UAAU,EAAE,QAAQ,CAAC;EAC9C1I,gBAAgB,CAACU,MAAM,EAAEiI,iBAAiB,EAAE,SAAS,CAAC;EACtDlJ,KAAK,CAACmJ,SAAS,CAAC,MAAM;IACpB,IAAIxH,kBAAkB,EAAE;MACtBiE,oBAAoB,CAACjE,kBAAkB,CAAC;IAC1C;EACF,CAAC,EAAE,CAACA,kBAAkB,EAAEiE,oBAAoB,CAAC,CAAC;EAC9C5F,KAAK,CAACmJ,SAAS,CAAC,MAAM;IACpB,MAAMC,YAAY,GAAGzI,mCAAmC,CAACM,MAAM,CAAC;;IAEhE;IACA,MAAMoI,mBAAmB,GAAG7H,kBAAkB,CAACc,OAAO;IACtDd,kBAAkB,CAACc,OAAO,GAAG1B,SAAS,CAACO,cAAc,CAAC,CAAC,CAAC;;IAExDiF,MAAM,CAACkD,OAAO,CAACnI,cAAc,CAAC,CAACoI,OAAO,CAAC,QAAkB;MAAA,IAAjB,CAACpH,EAAE,EAAEqH,MAAM,CAAC;MAClDpD,MAAM,CAACkD,OAAO,CAACE,MAAM,CAAC,CAACD,OAAO,CAAC,SAAqB;QAAA,IAApB,CAACnH,KAAK,EAAEC,MAAM,CAAC;QAC7C,IAAIoH,qBAAqB,EAAEC,sBAAsB,EAAEC,gBAAgB;QACnE,MAAMC,QAAQ,GAAG,CAAC,CAACH,qBAAqB,GAAGJ,mBAAmB,CAAClH,EAAE,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,CAACuH,sBAAsB,GAAGD,qBAAqB,CAACrH,KAAK,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGsH,sBAAsB,CAAC/G,IAAI,KAAKrC,aAAa,CAACiD,IAAI;QACpN,MAAMsG,UAAU,GAAG,CAACF,gBAAgB,GAAGP,YAAY,CAACjH,EAAE,CAAC,KAAK,IAAI,GAAGwH,gBAAgB,GAAGxH,EAAE;QACxF,IAAIE,MAAM,CAACM,IAAI,KAAKrC,aAAa,CAAC2C,IAAI,IAAI2G,QAAQ,KAAKtJ,aAAa,CAACiD,IAAI,EAAE;UACzEsD,8BAA8B,CAAChH,QAAQ,CAAC;YACtCsC,EAAE,EAAE0H,UAAU;YACdzH;UACF,CAAC,EAAEC,MAAM,CAAC,CAAC;QACb,CAAC,MAAM,IAAIA,MAAM,CAACM,IAAI,KAAKrC,aAAa,CAACiD,IAAI,IAAIqG,QAAQ,KAAKtJ,aAAa,CAAC2C,IAAI,EAAE;UAChFoE,6BAA6B,CAACxH,QAAQ,CAAC;YACrCsC,EAAE,EAAE0H,UAAU;YACdzH;UACF,CAAC,EAAEC,MAAM,CAAC,CAAC;QACb;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACpB,MAAM,EAAEE,cAAc,EAAE0F,8BAA8B,EAAEQ,6BAA6B,CAAC,CAAC;AAC7F,CAAC"},"metadata":{},"sourceType":"module"}