{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header filter with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback(function (field, depth) {\n    let event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef);\n\n    // Include pinned rows as well\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n    if (!rowToFocus) {\n      return;\n    }\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback((_ref3, event) => {\n    let {\n      fields,\n      depth\n    } = _ref3;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    var _event$relatedTarget;\n    if ((_event$relatedTarget = event.relatedTarget) != null && _event$relatedTarget.className.includes(gridClasses.columnHeader)) {\n      return;\n    }\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore, then remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'headerFilterBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","gridClasses","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","unstable_gridFocusColumnGroupHeaderSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","gridPinnedRowsSelector","focusStateInitializer","state","focus","cell","columnHeader","columnHeaderFilter","columnGroupHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","setColumnHeaderFilterFocus","setColumnGroupHeaderFocus","depth","getColumnGroupHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","visibleColumns","currentPage","pagination","paginationMode","pinnedRows","currentPageRows","concat","top","rows","bottom","rowIndexToFocus","findIndex","row","length","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleColumnGroupHeaderFocus","fields","focusedColumnGroup","includes","handleBlur","_","_event$relatedTarget","relatedTarget","className","handleCellMouseDown","handleDocumentClick","cellParams","canUpdateFocus","unstable_applyPipeProcessors","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","focusApi","focusPrivateApi","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header filter with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef);\n\n    // Include pinned rows as well\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n    if (!rowToFocus) {\n      return;\n    }\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    var _event$relatedTarget;\n    if ((_event$relatedTarget = event.relatedTarget) != null && _event$relatedTarget.className.includes(gridClasses.columnHeader)) {\n      return;\n    }\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore, then remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'headerFilterBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}