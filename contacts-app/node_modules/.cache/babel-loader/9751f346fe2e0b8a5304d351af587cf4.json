{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nimport { gridColumnLookupSelector, gridColumnVisibilityModelSelector, gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n\n  /**\n   * API METHODS\n   */\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = gridColumnMenuSelector(apiRef.current.state);\n    if (columnMenuState.field) {\n      const columnLookup = gridColumnLookupSelector(apiRef);\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const orderedFields = gridColumnFieldsSelector(apiRef);\n      let fieldToFocus = columnMenuState.field;\n\n      // If the column was removed from the grid, we need to find the closest visible field\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      }\n\n      // If the field to focus is hidden, we need to find the closest visible field\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};","map":{"version":3,"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","gridColumnMenuSelector","gridColumnLookupSelector","gridColumnVisibilityModelSelector","gridColumnFieldsSelector","columnMenuStateInitializer","state","columnMenu","open","useGridColumnMenu","apiRef","logger","showColumnMenu","useCallback","field","shouldUpdate","current","setState","debug","hidePreferences","forceUpdate","hideColumnMenu","columnMenuState","columnLookup","columnVisibilityModel","orderedFields","fieldToFocus","visibleOrderedFields","filter","fieldIndex","indexOf","setColumnHeaderFocus","undefined","toggleColumnMenu","columnMenuApi"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nimport { gridColumnLookupSelector, gridColumnVisibilityModelSelector, gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n\n  /**\n   * API METHODS\n   */\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = gridColumnMenuSelector(apiRef.current.state);\n    if (columnMenuState.field) {\n      const columnLookup = gridColumnLookupSelector(apiRef);\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const orderedFields = gridColumnFieldsSelector(apiRef);\n      let fieldToFocus = columnMenuState.field;\n\n      // If the column was removed from the grid, we need to find the closest visible field\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      }\n\n      // If the field to focus is hidden, we need to find the closest visible field\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}