{"ast":null,"code":"import { gridColumnDefinitionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { gridPinnedRowsSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nexport const getColumnsToExport = _ref => {\n  let {\n    apiRef,\n    options\n  } = _ref;\n  const columns = gridColumnDefinitionsSelector(apiRef);\n  if (options.fields) {\n    return options.fields.map(field => columns.find(column => column.field === field)).filter(column => !!column);\n  }\n  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);\n  return validColumns.filter(column => !column.disableExport);\n};\nexport const defaultGetRowsToExport = _ref2 => {\n  let {\n    apiRef\n  } = _ref2;\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n  const bodyRows = filteredSortedRowIds.filter(id => rowTree[id].type !== 'footer');\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map(row => row.id)) || [];\n  const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map(row => row.id)) || [];\n  bodyRows.unshift(...topPinnedRowsIds);\n  bodyRows.push(...bottomPinnedRowsIds);\n  if (selectedRows.size > 0) {\n    return bodyRows.filter(id => selectedRows.has(id));\n  }\n  return bodyRows;\n};","map":{"version":3,"names":["gridColumnDefinitionsSelector","gridVisibleColumnDefinitionsSelector","gridFilteredSortedRowIdsSelector","gridPinnedRowsSelector","gridRowTreeSelector","getColumnsToExport","apiRef","options","columns","fields","map","field","find","column","filter","validColumns","allColumns","disableExport","defaultGetRowsToExport","_pinnedRows$top","_pinnedRows$bottom","filteredSortedRowIds","rowTree","selectedRows","current","getSelectedRows","bodyRows","id","type","pinnedRows","topPinnedRowsIds","top","row","bottomPinnedRowsIds","bottom","unshift","push","size","has"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/export/utils.js"],"sourcesContent":["import { gridColumnDefinitionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { gridPinnedRowsSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nexport const getColumnsToExport = ({\n  apiRef,\n  options\n}) => {\n  const columns = gridColumnDefinitionsSelector(apiRef);\n  if (options.fields) {\n    return options.fields.map(field => columns.find(column => column.field === field)).filter(column => !!column);\n  }\n  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);\n  return validColumns.filter(column => !column.disableExport);\n};\nexport const defaultGetRowsToExport = ({\n  apiRef\n}) => {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n  const bodyRows = filteredSortedRowIds.filter(id => rowTree[id].type !== 'footer');\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map(row => row.id)) || [];\n  const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map(row => row.id)) || [];\n  bodyRows.unshift(...topPinnedRowsIds);\n  bodyRows.push(...bottomPinnedRowsIds);\n  if (selectedRows.size > 0) {\n    return bodyRows.filter(id => selectedRows.has(id));\n  }\n  return bodyRows;\n};"],"mappings":"AAAA,SAASA,6BAA6B,EAAEC,oCAAoC,QAAQ,YAAY;AAChG,SAASC,gCAAgC,QAAQ,WAAW;AAC5D,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,0BAA0B;AACtF,OAAO,MAAMC,kBAAkB,GAAG,QAG5B;EAAA,IAH6B;IACjCC,MAAM;IACNC;EACF,CAAC;EACC,MAAMC,OAAO,GAAGR,6BAA6B,CAACM,MAAM,CAAC;EACrD,IAAIC,OAAO,CAACE,MAAM,EAAE;IAClB,OAAOF,OAAO,CAACE,MAAM,CAACC,GAAG,CAACC,KAAK,IAAIH,OAAO,CAACI,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACF,KAAK,KAAKA,KAAK,CAAC,CAAC,CAACG,MAAM,CAACD,MAAM,IAAI,CAAC,CAACA,MAAM,CAAC;EAC/G;EACA,MAAME,YAAY,GAAGR,OAAO,CAACS,UAAU,GAAGR,OAAO,GAAGP,oCAAoC,CAACK,MAAM,CAAC;EAChG,OAAOS,YAAY,CAACD,MAAM,CAACD,MAAM,IAAI,CAACA,MAAM,CAACI,aAAa,CAAC;AAC7D,CAAC;AACD,OAAO,MAAMC,sBAAsB,GAAG,SAEhC;EAAA,IAFiC;IACrCZ;EACF,CAAC;EACC,IAAIa,eAAe,EAAEC,kBAAkB;EACvC,MAAMC,oBAAoB,GAAGnB,gCAAgC,CAACI,MAAM,CAAC;EACrE,MAAMgB,OAAO,GAAGlB,mBAAmB,CAACE,MAAM,CAAC;EAC3C,MAAMiB,YAAY,GAAGjB,MAAM,CAACkB,OAAO,CAACC,eAAe,EAAE;EACrD,MAAMC,QAAQ,GAAGL,oBAAoB,CAACP,MAAM,CAACa,EAAE,IAAIL,OAAO,CAACK,EAAE,CAAC,CAACC,IAAI,KAAK,QAAQ,CAAC;EACjF,MAAMC,UAAU,GAAG1B,sBAAsB,CAACG,MAAM,CAAC;EACjD,MAAMwB,gBAAgB,GAAG,CAACD,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACV,eAAe,GAAGU,UAAU,CAACE,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGZ,eAAe,CAACT,GAAG,CAACsB,GAAG,IAAIA,GAAG,CAACL,EAAE,CAAC,KAAK,EAAE;EACvJ,MAAMM,mBAAmB,GAAG,CAACJ,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACT,kBAAkB,GAAGS,UAAU,CAACK,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGd,kBAAkB,CAACV,GAAG,CAACsB,GAAG,IAAIA,GAAG,CAACL,EAAE,CAAC,KAAK,EAAE;EACnKD,QAAQ,CAACS,OAAO,CAAC,GAAGL,gBAAgB,CAAC;EACrCJ,QAAQ,CAACU,IAAI,CAAC,GAAGH,mBAAmB,CAAC;EACrC,IAAIV,YAAY,CAACc,IAAI,GAAG,CAAC,EAAE;IACzB,OAAOX,QAAQ,CAACZ,MAAM,CAACa,EAAE,IAAIJ,YAAY,CAACe,GAAG,CAACX,EAAE,CAAC,CAAC;EACpD;EACA,OAAOD,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module"}