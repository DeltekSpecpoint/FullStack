{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nconst rowHeightWarning = [`MUI: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef(Object.create(null));\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const initialHeights = {};\n      /* eslint-disable-next-line no-restricted-syntax */\n      for (const key in sizes) {\n        if (/^base[A-Z]/.test(key)) {\n          initialHeights[key] = sizes[key];\n        }\n      }\n      initialHeights.baseCenter = baseRowHeight;\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      /* eslint-disable-next-line no-restricted-syntax, guard-for-in */\n      for (const key in processedSizes) {\n        const value = processedSizes[key];\n        if (/^base[A-Z]/.test(key)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      }\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};","map":{"version":3,"names":["_extends","React","unstable_debounce","debounce","unstable_capitalize","capitalize","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityFactorSelector","gridFilterModelSelector","gridPaginationSelector","gridSortModelSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","DATA_GRID_PROPS_DEFAULT_VALUES","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","warnedOnceInvalidRowHeight","getValidRowHeight","rowHeightProp","defaultRowHeight","warningMessage","process","env","NODE_ENV","console","warn","rowHeightWarning","join","getRowHeightWarning","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","Object","create","lastMeasuredRowIndex","hasRowWithAutoHeight","densityFactor","filterModel","paginationState","sortModel","currentPage","pinnedRows","validRowHeight","rowHeight","Math","floor","hydrateRowsMeta","useCallback","_pinnedRows$top","_pinnedRows$bottom","current","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","initialHeights","key","test","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","reduce","acc","push","maximumBaseSize","otherSizes","value","forEach","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","position","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_setLastMeasuredRowIndex","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement","rowsMetaPrivateApi"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nconst rowHeightWarning = [`MUI: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef(Object.create(null));\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const initialHeights = {};\n      /* eslint-disable-next-line no-restricted-syntax */\n      for (const key in sizes) {\n        if (/^base[A-Z]/.test(key)) {\n          initialHeights[key] = sizes[key];\n        }\n      }\n      initialHeights.baseCenter = baseRowHeight;\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      /* eslint-disable-next-line no-restricted-syntax, guard-for-in */\n      for (const key in processedSizes) {\n        const value = processedSizes[key];\n        if (/^base[A-Z]/.test(key)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      }\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}