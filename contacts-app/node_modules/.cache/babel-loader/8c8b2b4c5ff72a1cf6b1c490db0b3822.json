{"ast":null,"code":"import { useGridInitialization } from '../hooks/core/useGridInitialization';\nimport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nimport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nimport { columnMenuStateInitializer, useGridColumnMenu } from '../hooks/features/columnMenu/useGridColumnMenu';\nimport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nimport { densityStateInitializer, useGridDensity } from '../hooks/features/density/useGridDensity';\nimport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nimport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nimport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nimport { focusStateInitializer, useGridFocus } from '../hooks/features/focus/useGridFocus';\nimport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nimport { useGridPagination, paginationStateInitializer } from '../hooks/features/pagination/useGridPagination';\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nimport { useGridEditing, editingStateInitializer } from '../hooks/features/editing/useGridEditing';\nimport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nimport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nimport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nimport { rowSelectionStateInitializer, useGridRowSelection } from '../hooks/features/rowSelection/useGridRowSelection';\nimport { useGridRowSelectionPreProcessors } from '../hooks/features/rowSelection/useGridRowSelectionPreProcessors';\nimport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nimport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nimport { useGridEvents } from '../hooks/features/events/useGridEvents';\nimport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nimport { rowsMetaStateInitializer, useGridRowsMeta } from '../hooks/features/rows/useGridRowsMeta';\nimport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nimport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nexport const useDataGridComponent = (inputApiRef, props) => {\n  const privateApiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(privateApiRef, props);\n  useGridRowsPreProcessors(privateApiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(rowSelectionStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnsStateInitializer, privateApiRef, props);\n  useGridInitializeState(rowsStateInitializer, privateApiRef, props);\n  useGridInitializeState(editingStateInitializer, privateApiRef, props);\n  useGridInitializeState(focusStateInitializer, privateApiRef, props);\n  useGridInitializeState(sortingStateInitializer, privateApiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, privateApiRef, props);\n  useGridInitializeState(filterStateInitializer, privateApiRef, props);\n  useGridInitializeState(densityStateInitializer, privateApiRef, props);\n  useGridInitializeState(paginationStateInitializer, privateApiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, privateApiRef, props);\n  useGridKeyboardNavigation(privateApiRef, props);\n  useGridRowSelection(privateApiRef, props);\n  useGridColumns(privateApiRef, props);\n  useGridRows(privateApiRef, props);\n  useGridParamsApi(privateApiRef, props);\n  useGridColumnSpanning(privateApiRef);\n  useGridColumnGrouping(privateApiRef, props);\n  useGridEditing(privateApiRef, props);\n  useGridFocus(privateApiRef, props);\n  useGridPreferencesPanel(privateApiRef, props);\n  useGridFilter(privateApiRef, props);\n  useGridSorting(privateApiRef, props);\n  useGridDensity(privateApiRef, props);\n  useGridPagination(privateApiRef, props);\n  useGridRowsMeta(privateApiRef, props);\n  useGridScroll(privateApiRef, props);\n  useGridColumnMenu(privateApiRef);\n  useGridCsvExport(privateApiRef, props);\n  useGridPrintExport(privateApiRef, props);\n  useGridClipboard(privateApiRef, props);\n  useGridDimensions(privateApiRef, props);\n  useGridEvents(privateApiRef, props);\n  useGridStatePersistence(privateApiRef);\n  return privateApiRef;\n};","map":{"version":3,"names":["useGridInitialization","useGridInitializeState","useGridClipboard","columnMenuStateInitializer","useGridColumnMenu","useGridColumns","columnsStateInitializer","densityStateInitializer","useGridDensity","useGridCsvExport","useGridPrintExport","useGridFilter","filterStateInitializer","focusStateInitializer","useGridFocus","useGridKeyboardNavigation","useGridPagination","paginationStateInitializer","useGridPreferencesPanel","preferencePanelStateInitializer","useGridEditing","editingStateInitializer","useGridRows","rowsStateInitializer","useGridRowsPreProcessors","useGridParamsApi","rowSelectionStateInitializer","useGridRowSelection","useGridRowSelectionPreProcessors","useGridSorting","sortingStateInitializer","useGridScroll","useGridEvents","useGridDimensions","rowsMetaStateInitializer","useGridRowsMeta","useGridStatePersistence","useGridColumnSpanning","useGridColumnGrouping","columnGroupsStateInitializer","useDataGridComponent","inputApiRef","props","privateApiRef"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js"],"sourcesContent":["import { useGridInitialization } from '../hooks/core/useGridInitialization';\nimport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nimport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nimport { columnMenuStateInitializer, useGridColumnMenu } from '../hooks/features/columnMenu/useGridColumnMenu';\nimport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nimport { densityStateInitializer, useGridDensity } from '../hooks/features/density/useGridDensity';\nimport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nimport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nimport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nimport { focusStateInitializer, useGridFocus } from '../hooks/features/focus/useGridFocus';\nimport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nimport { useGridPagination, paginationStateInitializer } from '../hooks/features/pagination/useGridPagination';\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nimport { useGridEditing, editingStateInitializer } from '../hooks/features/editing/useGridEditing';\nimport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nimport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nimport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nimport { rowSelectionStateInitializer, useGridRowSelection } from '../hooks/features/rowSelection/useGridRowSelection';\nimport { useGridRowSelectionPreProcessors } from '../hooks/features/rowSelection/useGridRowSelectionPreProcessors';\nimport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nimport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nimport { useGridEvents } from '../hooks/features/events/useGridEvents';\nimport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nimport { rowsMetaStateInitializer, useGridRowsMeta } from '../hooks/features/rows/useGridRowsMeta';\nimport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nimport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nexport const useDataGridComponent = (inputApiRef, props) => {\n  const privateApiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(privateApiRef, props);\n  useGridRowsPreProcessors(privateApiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(rowSelectionStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnsStateInitializer, privateApiRef, props);\n  useGridInitializeState(rowsStateInitializer, privateApiRef, props);\n  useGridInitializeState(editingStateInitializer, privateApiRef, props);\n  useGridInitializeState(focusStateInitializer, privateApiRef, props);\n  useGridInitializeState(sortingStateInitializer, privateApiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, privateApiRef, props);\n  useGridInitializeState(filterStateInitializer, privateApiRef, props);\n  useGridInitializeState(densityStateInitializer, privateApiRef, props);\n  useGridInitializeState(paginationStateInitializer, privateApiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, privateApiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, privateApiRef, props);\n  useGridKeyboardNavigation(privateApiRef, props);\n  useGridRowSelection(privateApiRef, props);\n  useGridColumns(privateApiRef, props);\n  useGridRows(privateApiRef, props);\n  useGridParamsApi(privateApiRef, props);\n  useGridColumnSpanning(privateApiRef);\n  useGridColumnGrouping(privateApiRef, props);\n  useGridEditing(privateApiRef, props);\n  useGridFocus(privateApiRef, props);\n  useGridPreferencesPanel(privateApiRef, props);\n  useGridFilter(privateApiRef, props);\n  useGridSorting(privateApiRef, props);\n  useGridDensity(privateApiRef, props);\n  useGridPagination(privateApiRef, props);\n  useGridRowsMeta(privateApiRef, props);\n  useGridScroll(privateApiRef, props);\n  useGridColumnMenu(privateApiRef);\n  useGridCsvExport(privateApiRef, props);\n  useGridPrintExport(privateApiRef, props);\n  useGridClipboard(privateApiRef, props);\n  useGridDimensions(privateApiRef, props);\n  useGridEvents(privateApiRef, props);\n  useGridStatePersistence(privateApiRef);\n  return privateApiRef;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}