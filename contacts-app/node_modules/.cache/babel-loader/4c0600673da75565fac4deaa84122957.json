{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from './gridStringColDef';\nimport { renderEditSingleSelectCell } from '../components/cell/GridEditSingleSelectCell';\nimport { getGridSingleSelectOperators } from './gridSingleSelectOperators';\nimport { isSingleSelectColDef } from '../components/panel/filterPanel/filterPanelUtils';\nimport { isObject } from '../utils/utils';\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n  valueFormatter(params) {\n    const {\n      id,\n      field,\n      value,\n      api\n    } = params;\n    const colDef = params.api.getColumn(field);\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n    let valueOptions;\n    if (typeof colDef.valueOptions === 'function') {\n      valueOptions = colDef.valueOptions({\n        id,\n        row: id ? api.getRow(id) : null,\n        field\n      });\n    } else {\n      valueOptions = colDef.valueOptions;\n    }\n    if (value == null) {\n      return '';\n    }\n    if (!valueOptions) {\n      return value;\n    }\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, params) => {\n    const colDef = params.colDef;\n    const colDefValueOptions = colDef.valueOptions;\n    const valueOptions = typeof colDefValueOptions === 'function' ? colDefValueOptions({\n      field: colDef.field\n    }) : colDefValueOptions || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n      return false;\n    });\n    if (valueOption) {\n      return value;\n    }\n    // do not paste the value if it is not in the valueOptions\n    return undefined;\n  }\n});","map":{"version":3,"names":["_extends","GRID_STRING_COL_DEF","renderEditSingleSelectCell","getGridSingleSelectOperators","isSingleSelectColDef","isObject","isArrayOfObjects","options","defaultGetOptionValue","value","defaultGetOptionLabel","label","String","GRID_SINGLE_SELECT_COL_DEF","type","getOptionLabel","getOptionValue","valueFormatter","params","id","field","api","colDef","getColumn","valueOptions","row","getRow","valueOption","find","option","renderEditCell","filterOperators","pastedValueParser","colDefValueOptions","undefined"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from './gridStringColDef';\nimport { renderEditSingleSelectCell } from '../components/cell/GridEditSingleSelectCell';\nimport { getGridSingleSelectOperators } from './gridSingleSelectOperators';\nimport { isSingleSelectColDef } from '../components/panel/filterPanel/filterPanelUtils';\nimport { isObject } from '../utils/utils';\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n  valueFormatter(params) {\n    const {\n      id,\n      field,\n      value,\n      api\n    } = params;\n    const colDef = params.api.getColumn(field);\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n    let valueOptions;\n    if (typeof colDef.valueOptions === 'function') {\n      valueOptions = colDef.valueOptions({\n        id,\n        row: id ? api.getRow(id) : null,\n        field\n      });\n    } else {\n      valueOptions = colDef.valueOptions;\n    }\n    if (value == null) {\n      return '';\n    }\n    if (!valueOptions) {\n      return value;\n    }\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, params) => {\n    const colDef = params.colDef;\n    const colDefValueOptions = colDef.valueOptions;\n    const valueOptions = typeof colDefValueOptions === 'function' ? colDefValueOptions({\n      field: colDef.field\n    }) : colDefValueOptions || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n      return false;\n    });\n    if (valueOption) {\n      return value;\n    }\n    // do not paste the value if it is not in the valueOptions\n    return undefined;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}