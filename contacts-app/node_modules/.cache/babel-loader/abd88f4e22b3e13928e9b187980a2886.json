{"ast":null,"code":"import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils';\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel) => {\n  const getParents = field => {\n    var _unwrappedGroupingMod;\n    return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n  };\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      var _getParents$depth;\n      const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};","map":{"version":3,"names":["isLeaf","isDeepEqual","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplete","field","undefined","Error","join","groupId","children","forEach","child","unwrapGroupingColumnModel","columnGroupingModel","unwrappedSubTree","getColumnGroupsHeaderStructure","orderedColumns","unwrappedGroupingModel","getParents","_unwrappedGroupingMod","groupingHeaderStructure","maxDepth","Math","max","map","length","haveSameParents","field1","field2","depth","slice","depthStructure","reduce","structure","newField","_getParents$depth","columnFields","lastGroup","prevField","prevGroupId","push"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js"],"sourcesContent":["import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils';\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel) => {\n  const getParents = field => {\n    var _unwrappedGroupingMod;\n    return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n  };\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      var _getParents$depth;\n      const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,oCAAoC;AAC3D,SAASC,WAAW,QAAQ,sBAAsB;AAClD;AACA,MAAMC,kCAAkC,GAAG,CAACC,eAAe,EAAEC,OAAO,EAAEC,gCAAgC,KAAK;EACzG,IAAIL,MAAM,CAACG,eAAe,CAAC,EAAE;IAC3B,IAAIE,gCAAgC,CAACF,eAAe,CAACG,KAAK,CAAC,KAAKC,SAAS,EAAE;MACzE,MAAM,IAAIC,KAAK,CAAC,CAAE,oDAAmD,EAAG,gBAAeL,eAAe,CAACG,KAAM,0CAAyC,EAAG,KAAID,gCAAgC,CAACF,eAAe,CAACG,KAAK,CAAC,CAACG,IAAI,CAAC,KAAK,CAAE,EAAC,EAAG,KAAIL,OAAO,CAACK,IAAI,CAAC,KAAK,CAAE,EAAC,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7Q;IACAJ,gCAAgC,CAACF,eAAe,CAACG,KAAK,CAAC,GAAGF,OAAO;IACjE;EACF;EACA,MAAM;IACJM,OAAO;IACPC;EACF,CAAC,GAAGR,eAAe;EACnBQ,QAAQ,CAACC,OAAO,CAACC,KAAK,IAAI;IACxBX,kCAAkC,CAACW,KAAK,EAAE,CAAC,GAAGT,OAAO,EAAEM,OAAO,CAAC,EAAEL,gCAAgC,CAAC;EACpG,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,yBAAyB,GAAGC,mBAAmB,IAAI;EAC9D,IAAI,CAACA,mBAAmB,EAAE;IACxB,OAAO,CAAC,CAAC;EACX;EACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;EAC3BD,mBAAmB,CAACH,OAAO,CAACT,eAAe,IAAI;IAC7CD,kCAAkC,CAACC,eAAe,EAAE,EAAE,EAAEa,gBAAgB,CAAC;EAC3E,CAAC,CAAC;EACF,OAAOA,gBAAgB;AACzB,CAAC;AACD,OAAO,MAAMC,8BAA8B,GAAG,CAACC,cAAc,EAAEC,sBAAsB,KAAK;EACxF,MAAMC,UAAU,GAAGd,KAAK,IAAI;IAC1B,IAAIe,qBAAqB;IACzB,OAAO,CAACA,qBAAqB,GAAGF,sBAAsB,CAACb,KAAK,CAAC,KAAK,IAAI,GAAGe,qBAAqB,GAAG,EAAE;EACrG,CAAC;EACD,MAAMC,uBAAuB,GAAG,EAAE;EAClC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,cAAc,CAACQ,GAAG,CAACpB,KAAK,IAAIc,UAAU,CAACd,KAAK,CAAC,CAACqB,MAAM,CAAC,CAAC;EACnF,MAAMC,eAAe,GAAG,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,KAAK9B,WAAW,CAACmB,UAAU,CAACS,MAAM,CAAC,CAACG,KAAK,CAAC,CAAC,EAAED,KAAK,GAAG,CAAC,CAAC,EAAEX,UAAU,CAACU,MAAM,CAAC,CAACE,KAAK,CAAC,CAAC,EAAED,KAAK,GAAG,CAAC,CAAC,CAAC;EAC9I,KAAK,IAAIA,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGR,QAAQ,EAAEQ,KAAK,IAAI,CAAC,EAAE;IAChD,MAAME,cAAc,GAAGf,cAAc,CAACgB,MAAM,CAAC,CAACC,SAAS,EAAEC,QAAQ,KAAK;MACpE,IAAIC,iBAAiB;MACrB,MAAM3B,OAAO,GAAG,CAAC2B,iBAAiB,GAAGjB,UAAU,CAACgB,QAAQ,CAAC,CAACL,KAAK,CAAC,KAAK,IAAI,GAAGM,iBAAiB,GAAG,IAAI;MACpG,IAAIF,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAO,CAAC;UACNW,YAAY,EAAE,CAACF,QAAQ,CAAC;UACxB1B;QACF,CAAC,CAAC;MACJ;MACA,MAAM6B,SAAS,GAAGJ,SAAS,CAACA,SAAS,CAACR,MAAM,GAAG,CAAC,CAAC;MACjD,MAAMa,SAAS,GAAGD,SAAS,CAACD,YAAY,CAACC,SAAS,CAACD,YAAY,CAACX,MAAM,GAAG,CAAC,CAAC;MAC3E,MAAMc,WAAW,GAAGF,SAAS,CAAC7B,OAAO;MACrC,IAAI+B,WAAW,KAAK/B,OAAO,IAAI,CAACkB,eAAe,CAACY,SAAS,EAAEJ,QAAQ,EAAEL,KAAK,CAAC,EAAE;QAC3E;QACA,OAAO,CAAC,GAAGI,SAAS,EAAE;UACpBG,YAAY,EAAE,CAACF,QAAQ,CAAC;UACxB1B;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,OAAO,CAAC,GAAGyB,SAAS,CAACH,KAAK,CAAC,CAAC,EAAEG,SAAS,CAACR,MAAM,GAAG,CAAC,CAAC,EAAE;QACnDW,YAAY,EAAE,CAAC,GAAGC,SAAS,CAACD,YAAY,EAAEF,QAAQ,CAAC;QACnD1B;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;IACNY,uBAAuB,CAACoB,IAAI,CAACT,cAAc,CAAC;EAC9C;EACA,OAAOX,uBAAuB;AAChC,CAAC"},"metadata":{},"sourceType":"module"}