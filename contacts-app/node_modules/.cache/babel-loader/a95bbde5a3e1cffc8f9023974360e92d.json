{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { styled } from '@mui/system';\nimport { unstable_composeClasses as composeClasses, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport clsx from 'clsx';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridExpandedRowCountSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridRowCountSelector, gridRowsLoadingSelector } from '../../hooks/features/rows/gridRowsSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getMinimalContentHeight } from '../../hooks/features/rows/gridRowsUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridOverlayWrapperRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapper',\n  overridesResolver: (props, styles) => styles.overlayWrapper\n})({\n  position: 'sticky',\n  // To stay in place while scrolling\n  top: 0,\n  left: 0,\n  width: 0,\n  // To stay above the content instead of shifting it down\n  height: 0,\n  // To stay above the content instead of shifting it down\n  zIndex: 4 // Should be above pinned columns, pinned rows and detail panel\n});\n\nconst GridOverlayWrapperInner = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapperInner',\n  overridesResolver: (props, styles) => styles.overlayWrapperInner\n})({});\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['overlayWrapper'],\n    inner: ['overlayWrapperInner']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridOverlayWrapper(props) {\n  var _viewportInnerSize$he, _viewportInnerSize$wi;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const [viewportInnerSize, setViewportInnerSize] = React.useState(() => {\n    var _apiRef$current$getRo, _apiRef$current$getRo2;\n    return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;\n  });\n  const handleViewportSizeChange = React.useCallback(() => {\n    var _apiRef$current$getRo3, _apiRef$current$getRo4;\n    setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);\n  }, [apiRef]);\n  useEnhancedEffect(() => {\n    return apiRef.current.subscribeEvent('viewportInnerSizeChange', handleViewportSizeChange);\n  }, [apiRef, handleViewportSizeChange]);\n  let height = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;\n  if (rootProps.autoHeight && height === 0) {\n    height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const classes = useUtilityClasses(_extends({}, props, {\n    classes: rootProps.classes\n  }));\n  if (!viewportInnerSize) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(GridOverlayWrapperRoot, {\n    className: clsx(classes.root),\n    children: /*#__PURE__*/_jsx(GridOverlayWrapperInner, _extends({\n      className: clsx(classes.inner),\n      style: {\n        height,\n        width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0\n      }\n    }, props))\n  });\n}\nexport function GridOverlays() {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const showNoRowsOverlay = !loading && totalRowCount === 0;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  let overlay = null;\n  if (showNoRowsOverlay) {\n    var _rootProps$slotProps;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.noRowsOverlay, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.noRowsOverlay));\n  }\n  if (showNoResultsOverlay) {\n    var _rootProps$slotProps2;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.noResultsOverlay, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.noResultsOverlay));\n  }\n  if (loading) {\n    var _rootProps$slotProps3;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.loadingOverlay, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.loadingOverlay));\n  }\n  if (overlay === null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(GridOverlayWrapper, {\n    children: overlay\n  });\n}","map":{"version":3,"names":["_extends","React","styled","unstable_composeClasses","composeClasses","unstable_useEnhancedEffect","useEnhancedEffect","clsx","useGridSelector","gridExpandedRowCountSelector","gridRowCountSelector","gridRowsLoadingSelector","useGridApiContext","useGridRootProps","getMinimalContentHeight","getDataGridUtilityClass","jsx","_jsx","GridOverlayWrapperRoot","name","slot","overridesResolver","props","styles","overlayWrapper","position","top","left","width","height","zIndex","GridOverlayWrapperInner","overlayWrapperInner","useUtilityClasses","ownerState","classes","slots","root","inner","GridOverlayWrapper","_viewportInnerSize$he","_viewportInnerSize$wi","apiRef","rootProps","viewportInnerSize","setViewportInnerSize","useState","_apiRef$current$getRo","_apiRef$current$getRo2","current","getRootDimensions","handleViewportSizeChange","useCallback","_apiRef$current$getRo3","_apiRef$current$getRo4","subscribeEvent","autoHeight","rowHeight","className","children","style","GridOverlays","totalRowCount","visibleRowCount","loading","showNoRowsOverlay","showNoResultsOverlay","overlay","_rootProps$slotProps","noRowsOverlay","slotProps","_rootProps$slotProps2","noResultsOverlay","_rootProps$slotProps3","loadingOverlay"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/components/base/GridOverlays.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { styled } from '@mui/system';\nimport { unstable_composeClasses as composeClasses, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport clsx from 'clsx';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridExpandedRowCountSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridRowCountSelector, gridRowsLoadingSelector } from '../../hooks/features/rows/gridRowsSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getMinimalContentHeight } from '../../hooks/features/rows/gridRowsUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridOverlayWrapperRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapper',\n  overridesResolver: (props, styles) => styles.overlayWrapper\n})({\n  position: 'sticky',\n  // To stay in place while scrolling\n  top: 0,\n  left: 0,\n  width: 0,\n  // To stay above the content instead of shifting it down\n  height: 0,\n  // To stay above the content instead of shifting it down\n  zIndex: 4 // Should be above pinned columns, pinned rows and detail panel\n});\n\nconst GridOverlayWrapperInner = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapperInner',\n  overridesResolver: (props, styles) => styles.overlayWrapperInner\n})({});\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['overlayWrapper'],\n    inner: ['overlayWrapperInner']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridOverlayWrapper(props) {\n  var _viewportInnerSize$he, _viewportInnerSize$wi;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const [viewportInnerSize, setViewportInnerSize] = React.useState(() => {\n    var _apiRef$current$getRo, _apiRef$current$getRo2;\n    return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;\n  });\n  const handleViewportSizeChange = React.useCallback(() => {\n    var _apiRef$current$getRo3, _apiRef$current$getRo4;\n    setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);\n  }, [apiRef]);\n  useEnhancedEffect(() => {\n    return apiRef.current.subscribeEvent('viewportInnerSizeChange', handleViewportSizeChange);\n  }, [apiRef, handleViewportSizeChange]);\n  let height = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;\n  if (rootProps.autoHeight && height === 0) {\n    height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const classes = useUtilityClasses(_extends({}, props, {\n    classes: rootProps.classes\n  }));\n  if (!viewportInnerSize) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(GridOverlayWrapperRoot, {\n    className: clsx(classes.root),\n    children: /*#__PURE__*/_jsx(GridOverlayWrapperInner, _extends({\n      className: clsx(classes.inner),\n      style: {\n        height,\n        width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0\n      }\n    }, props))\n  });\n}\nexport function GridOverlays() {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const showNoRowsOverlay = !loading && totalRowCount === 0;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  let overlay = null;\n  if (showNoRowsOverlay) {\n    var _rootProps$slotProps;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.noRowsOverlay, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.noRowsOverlay));\n  }\n  if (showNoResultsOverlay) {\n    var _rootProps$slotProps2;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.noResultsOverlay, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.noResultsOverlay));\n  }\n  if (loading) {\n    var _rootProps$slotProps3;\n    overlay = /*#__PURE__*/_jsx(rootProps.slots.loadingOverlay, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.loadingOverlay));\n  }\n  if (overlay === null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(GridOverlayWrapper, {\n    children: overlay\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}