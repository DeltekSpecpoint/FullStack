{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nfunction sanitizeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n    return formattedValue;\n  }\n  return value;\n}\nexport const serializeCellValue = (cellParams, options) => {\n  const {\n    delimiterCharacter,\n    ignoreValueFormatter\n  } = options;\n  let value;\n  if (ignoreValueFormatter) {\n    var _cellParams$value2;\n    const columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      var _cellParams$value;\n      value = (_cellParams$value = cellParams.value) == null ? void 0 : _cellParams$value.toISOString();\n    } else if (typeof ((_cellParams$value2 = cellParams.value) == null ? void 0 : _cellParams$value2.toString) === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, delimiterCharacter);\n};\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst serializeRow = _ref => {\n  let {\n    id,\n    columns,\n    getCellParams,\n    delimiterCharacter,\n    ignoreValueFormatter\n  } = _ref;\n  return columns.map(column => {\n    const cellParams = getCellParams(id, column.field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        objectFormattedValueWarning();\n      }\n    }\n    return serializeCellValue(cellParams, {\n      delimiterCharacter,\n      ignoreValueFormatter\n    });\n  });\n};\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders,\n    ignoreValueFormatter\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({\n    id,\n    columns,\n    getCellParams,\n    delimiterCharacter,\n    ignoreValueFormatter\n  }).join(delimiterCharacter)}\\r\\n`, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => sanitizeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}","map":{"version":3,"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","sanitizeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","serializeCellValue","cellParams","options","ignoreValueFormatter","_cellParams$value2","columnType","colDef","type","String","_cellParams$value","toISOString","toString","objectFormattedValueWarning","serializeRow","id","columns","getCellParams","map","column","field","process","env","NODE_ENV","buildCSV","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nfunction sanitizeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n    return formattedValue;\n  }\n  return value;\n}\nexport const serializeCellValue = (cellParams, options) => {\n  const {\n    delimiterCharacter,\n    ignoreValueFormatter\n  } = options;\n  let value;\n  if (ignoreValueFormatter) {\n    var _cellParams$value2;\n    const columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      var _cellParams$value;\n      value = (_cellParams$value = cellParams.value) == null ? void 0 : _cellParams$value.toISOString();\n    } else if (typeof ((_cellParams$value2 = cellParams.value) == null ? void 0 : _cellParams$value2.toString) === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, delimiterCharacter);\n};\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst serializeRow = ({\n  id,\n  columns,\n  getCellParams,\n  delimiterCharacter,\n  ignoreValueFormatter\n}) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n  return serializeCellValue(cellParams, {\n    delimiterCharacter,\n    ignoreValueFormatter\n  });\n});\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders,\n    ignoreValueFormatter\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({\n    id,\n    columns,\n    getCellParams,\n    delimiterCharacter,\n    ignoreValueFormatter\n  }).join(delimiterCharacter)}\\r\\n`, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => sanitizeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}