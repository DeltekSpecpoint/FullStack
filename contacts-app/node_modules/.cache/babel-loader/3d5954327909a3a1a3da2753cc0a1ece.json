{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = _ref3 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref3;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }, MEMOIZE_OPTIONS));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove\n      }, inputProps, {\n        style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle\n      });\n    },\n    getContentProps: function () {\n      let {\n        style\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: style ? _extends({}, style, contentSize) : contentSize\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","MEMOIZE_OPTIONS","maxSize","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","rowStyleCache","Object","create","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","slice","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","visibleRows","direction","state","updateRenderContext","publishEvent","initialRenderContext","params","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","_rootProps$slotProps","onRowRender","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","calculateColSpan","rowId","renderedColumns","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","field","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","rowHeight","selected","containerWidth","isLastVisible","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","register","getRootProps","inputProps","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["C:/Users/Armi/source/repos/FullStack/contacts-app/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }, MEMOIZE_OPTIONS));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}